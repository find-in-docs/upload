// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/samirgadkari/search/ent/doc"
	"github.com/samirgadkari/search/ent/predicate"
)

// DocUpdate is the builder for updating Doc entities.
type DocUpdate struct {
	config
	hooks    []Hook
	mutation *DocMutation
}

// Where appends a list predicates to the DocUpdate builder.
func (du *DocUpdate) Where(ps ...predicate.Doc) *DocUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetWordInts sets the "wordInts" field.
func (du *DocUpdate) SetWordInts(b []byte) *DocUpdate {
	du.mutation.SetWordInts(b)
	return du
}

// SetInputDocId sets the "inputDocId" field.
func (du *DocUpdate) SetInputDocId(s string) *DocUpdate {
	du.mutation.SetInputDocId(s)
	return du
}

// SetUserId sets the "userId" field.
func (du *DocUpdate) SetUserId(s string) *DocUpdate {
	du.mutation.SetUserId(s)
	return du
}

// SetBusinessId sets the "businessId" field.
func (du *DocUpdate) SetBusinessId(s string) *DocUpdate {
	du.mutation.SetBusinessId(s)
	return du
}

// SetStars sets the "stars" field.
func (du *DocUpdate) SetStars(f float32) *DocUpdate {
	du.mutation.ResetStars()
	du.mutation.SetStars(f)
	return du
}

// AddStars adds f to the "stars" field.
func (du *DocUpdate) AddStars(f float32) *DocUpdate {
	du.mutation.AddStars(f)
	return du
}

// SetUseful sets the "useful" field.
func (du *DocUpdate) SetUseful(i int16) *DocUpdate {
	du.mutation.ResetUseful()
	du.mutation.SetUseful(i)
	return du
}

// AddUseful adds i to the "useful" field.
func (du *DocUpdate) AddUseful(i int16) *DocUpdate {
	du.mutation.AddUseful(i)
	return du
}

// SetFunny sets the "funny" field.
func (du *DocUpdate) SetFunny(i int16) *DocUpdate {
	du.mutation.ResetFunny()
	du.mutation.SetFunny(i)
	return du
}

// AddFunny adds i to the "funny" field.
func (du *DocUpdate) AddFunny(i int16) *DocUpdate {
	du.mutation.AddFunny(i)
	return du
}

// SetCool sets the "cool" field.
func (du *DocUpdate) SetCool(i int16) *DocUpdate {
	du.mutation.ResetCool()
	du.mutation.SetCool(i)
	return du
}

// AddCool adds i to the "cool" field.
func (du *DocUpdate) AddCool(i int16) *DocUpdate {
	du.mutation.AddCool(i)
	return du
}

// SetText sets the "text" field.
func (du *DocUpdate) SetText(s string) *DocUpdate {
	du.mutation.SetText(s)
	return du
}

// SetDate sets the "date" field.
func (du *DocUpdate) SetDate(s string) *DocUpdate {
	du.mutation.SetDate(s)
	return du
}

// Mutation returns the DocMutation object of the builder.
func (du *DocUpdate) Mutation() *DocMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DocUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doc.Table,
			Columns: doc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: doc.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.WordInts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: doc.FieldWordInts,
		})
	}
	if value, ok := du.mutation.InputDocId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldInputDocId,
		})
	}
	if value, ok := du.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldUserId,
		})
	}
	if value, ok := du.mutation.BusinessId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldBusinessId,
		})
	}
	if value, ok := du.mutation.Stars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: doc.FieldStars,
		})
	}
	if value, ok := du.mutation.AddedStars(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: doc.FieldStars,
		})
	}
	if value, ok := du.mutation.Useful(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldUseful,
		})
	}
	if value, ok := du.mutation.AddedUseful(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldUseful,
		})
	}
	if value, ok := du.mutation.Funny(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldFunny,
		})
	}
	if value, ok := du.mutation.AddedFunny(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldFunny,
		})
	}
	if value, ok := du.mutation.Cool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldCool,
		})
	}
	if value, ok := du.mutation.AddedCool(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldCool,
		})
	}
	if value, ok := du.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldText,
		})
	}
	if value, ok := du.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldDate,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DocUpdateOne is the builder for updating a single Doc entity.
type DocUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocMutation
}

// SetWordInts sets the "wordInts" field.
func (duo *DocUpdateOne) SetWordInts(b []byte) *DocUpdateOne {
	duo.mutation.SetWordInts(b)
	return duo
}

// SetInputDocId sets the "inputDocId" field.
func (duo *DocUpdateOne) SetInputDocId(s string) *DocUpdateOne {
	duo.mutation.SetInputDocId(s)
	return duo
}

// SetUserId sets the "userId" field.
func (duo *DocUpdateOne) SetUserId(s string) *DocUpdateOne {
	duo.mutation.SetUserId(s)
	return duo
}

// SetBusinessId sets the "businessId" field.
func (duo *DocUpdateOne) SetBusinessId(s string) *DocUpdateOne {
	duo.mutation.SetBusinessId(s)
	return duo
}

// SetStars sets the "stars" field.
func (duo *DocUpdateOne) SetStars(f float32) *DocUpdateOne {
	duo.mutation.ResetStars()
	duo.mutation.SetStars(f)
	return duo
}

// AddStars adds f to the "stars" field.
func (duo *DocUpdateOne) AddStars(f float32) *DocUpdateOne {
	duo.mutation.AddStars(f)
	return duo
}

// SetUseful sets the "useful" field.
func (duo *DocUpdateOne) SetUseful(i int16) *DocUpdateOne {
	duo.mutation.ResetUseful()
	duo.mutation.SetUseful(i)
	return duo
}

// AddUseful adds i to the "useful" field.
func (duo *DocUpdateOne) AddUseful(i int16) *DocUpdateOne {
	duo.mutation.AddUseful(i)
	return duo
}

// SetFunny sets the "funny" field.
func (duo *DocUpdateOne) SetFunny(i int16) *DocUpdateOne {
	duo.mutation.ResetFunny()
	duo.mutation.SetFunny(i)
	return duo
}

// AddFunny adds i to the "funny" field.
func (duo *DocUpdateOne) AddFunny(i int16) *DocUpdateOne {
	duo.mutation.AddFunny(i)
	return duo
}

// SetCool sets the "cool" field.
func (duo *DocUpdateOne) SetCool(i int16) *DocUpdateOne {
	duo.mutation.ResetCool()
	duo.mutation.SetCool(i)
	return duo
}

// AddCool adds i to the "cool" field.
func (duo *DocUpdateOne) AddCool(i int16) *DocUpdateOne {
	duo.mutation.AddCool(i)
	return duo
}

// SetText sets the "text" field.
func (duo *DocUpdateOne) SetText(s string) *DocUpdateOne {
	duo.mutation.SetText(s)
	return duo
}

// SetDate sets the "date" field.
func (duo *DocUpdateOne) SetDate(s string) *DocUpdateOne {
	duo.mutation.SetDate(s)
	return duo
}

// Mutation returns the DocMutation object of the builder.
func (duo *DocUpdateOne) Mutation() *DocMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocUpdateOne) Select(field string, fields ...string) *DocUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Doc entity.
func (duo *DocUpdateOne) Save(ctx context.Context) (*Doc, error) {
	var (
		err  error
		node *Doc
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DocMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocUpdateOne) SaveX(ctx context.Context) *Doc {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DocUpdateOne) sqlSave(ctx context.Context) (_node *Doc, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   doc.Table,
			Columns: doc.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: doc.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Doc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, doc.FieldID)
		for _, f := range fields {
			if !doc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != doc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.WordInts(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: doc.FieldWordInts,
		})
	}
	if value, ok := duo.mutation.InputDocId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldInputDocId,
		})
	}
	if value, ok := duo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldUserId,
		})
	}
	if value, ok := duo.mutation.BusinessId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldBusinessId,
		})
	}
	if value, ok := duo.mutation.Stars(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: doc.FieldStars,
		})
	}
	if value, ok := duo.mutation.AddedStars(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: doc.FieldStars,
		})
	}
	if value, ok := duo.mutation.Useful(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldUseful,
		})
	}
	if value, ok := duo.mutation.AddedUseful(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldUseful,
		})
	}
	if value, ok := duo.mutation.Funny(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldFunny,
		})
	}
	if value, ok := duo.mutation.AddedFunny(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldFunny,
		})
	}
	if value, ok := duo.mutation.Cool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldCool,
		})
	}
	if value, ok := duo.mutation.AddedCool(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: doc.FieldCool,
		})
	}
	if value, ok := duo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldText,
		})
	}
	if value, ok := duo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: doc.FieldDate,
		})
	}
	_node = &Doc{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
