// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/samirgadkari/search/ent/doc"
)

// Doc is the model entity for the Doc schema.
type Doc struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// WordInts holds the value of the "wordInts" field.
	WordInts []byte `json:"wordInts,omitempty"`
	// InputDocId holds the value of the "inputDocId" field.
	InputDocId string `json:"inputDocId,omitempty"`
	// UserId holds the value of the "userId" field.
	UserId string `json:"userId,omitempty"`
	// BusinessId holds the value of the "businessId" field.
	BusinessId string `json:"businessId,omitempty"`
	// Stars holds the value of the "stars" field.
	Stars float32 `json:"stars,omitempty"`
	// Useful holds the value of the "useful" field.
	Useful int16 `json:"useful,omitempty"`
	// Funny holds the value of the "funny" field.
	Funny int16 `json:"funny,omitempty"`
	// Cool holds the value of the "cool" field.
	Cool int16 `json:"cool,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Doc) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case doc.FieldWordInts:
			values[i] = new([]byte)
		case doc.FieldStars:
			values[i] = new(sql.NullFloat64)
		case doc.FieldID, doc.FieldUseful, doc.FieldFunny, doc.FieldCool:
			values[i] = new(sql.NullInt64)
		case doc.FieldInputDocId, doc.FieldUserId, doc.FieldBusinessId, doc.FieldText, doc.FieldDate:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Doc", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Doc fields.
func (d *Doc) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case doc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = uint32(value.Int64)
		case doc.FieldWordInts:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field wordInts", values[i])
			} else if value != nil {
				d.WordInts = *value
			}
		case doc.FieldInputDocId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field inputDocId", values[i])
			} else if value.Valid {
				d.InputDocId = value.String
			}
		case doc.FieldUserId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userId", values[i])
			} else if value.Valid {
				d.UserId = value.String
			}
		case doc.FieldBusinessId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field businessId", values[i])
			} else if value.Valid {
				d.BusinessId = value.String
			}
		case doc.FieldStars:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stars", values[i])
			} else if value.Valid {
				d.Stars = float32(value.Float64)
			}
		case doc.FieldUseful:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field useful", values[i])
			} else if value.Valid {
				d.Useful = int16(value.Int64)
			}
		case doc.FieldFunny:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field funny", values[i])
			} else if value.Valid {
				d.Funny = int16(value.Int64)
			}
		case doc.FieldCool:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cool", values[i])
			} else if value.Valid {
				d.Cool = int16(value.Int64)
			}
		case doc.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				d.Text = value.String
			}
		case doc.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				d.Date = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Doc.
// Note that you need to call Doc.Unwrap() before calling this method if this Doc
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Doc) Update() *DocUpdateOne {
	return (&DocClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Doc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Doc) Unwrap() *Doc {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Doc is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Doc) String() string {
	var builder strings.Builder
	builder.WriteString("Doc(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", wordInts=")
	builder.WriteString(fmt.Sprintf("%v", d.WordInts))
	builder.WriteString(", inputDocId=")
	builder.WriteString(d.InputDocId)
	builder.WriteString(", userId=")
	builder.WriteString(d.UserId)
	builder.WriteString(", businessId=")
	builder.WriteString(d.BusinessId)
	builder.WriteString(", stars=")
	builder.WriteString(fmt.Sprintf("%v", d.Stars))
	builder.WriteString(", useful=")
	builder.WriteString(fmt.Sprintf("%v", d.Useful))
	builder.WriteString(", funny=")
	builder.WriteString(fmt.Sprintf("%v", d.Funny))
	builder.WriteString(", cool=")
	builder.WriteString(fmt.Sprintf("%v", d.Cool))
	builder.WriteString(", text=")
	builder.WriteString(d.Text)
	builder.WriteString(", date=")
	builder.WriteString(d.Date)
	builder.WriteByte(')')
	return builder.String()
}

// Docs is a parsable slice of Doc.
type Docs []*Doc

func (d Docs) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
